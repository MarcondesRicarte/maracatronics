/*
 * *********************************************************
 * Copyright (c) 2009 - 2013, DHBW Mannheim - Tigers Mannheim
 * Project: TIGERS - Sumatra
 * Date: Oct 10, 2013
 * Author(s): Nicolai Ommer <nicolai.ommer@gmail.com>
 * 
 * *********************************************************
 */
package edu.dhbw.mannheim.tigers.sumatra.model.data.modules.ai;

import java.util.HashMap;
import java.util.Map;

import net.sf.oval.constraint.AssertValid;
import net.sf.oval.constraint.NotNull;

import com.sleepycat.persist.model.Persistent;

import edu.dhbw.mannheim.tigers.sumatra.model.data.frames.AIInfoFrame;
import edu.dhbw.mannheim.tigers.sumatra.model.data.trackedobjects.ids.BotID;
import edu.dhbw.mannheim.tigers.sumatra.model.modules.impls.ai.ares.Ares;
import edu.dhbw.mannheim.tigers.sumatra.model.modules.impls.ai.sisyphus.data.Path;


/**
 * Container for data generated by {@link Ares} for the {@link AIInfoFrame}
 * 
 * @author Nicolai Ommer <nicolai.ommer@gmail.com>
 * 
 */
@Persistent(version = 1)
public class AresData
{
	// --------------------------------------------------------------------------
	// --- variables and constants ----------------------------------------------
	// --------------------------------------------------------------------------
	
	@NotNull
	@AssertValid
	private final Map<BotID, Path>		paths;
	
	@NotNull
	@AssertValid
	/** latest paths from PP thread. Not the currently executed ones! */
	private final Map<BotID, Path>		latestPaths;
	
	private final Map<BotID, Integer>	numPaths;
	
	
	// --------------------------------------------------------------------------
	// --- constructors ---------------------------------------------------------
	// --------------------------------------------------------------------------
	
	/**
	 * @param paths
	 * @param latestPaths
	 * @param numPaths
	 */
	public AresData(Map<BotID, Path> paths, Map<BotID, Path> latestPaths, Map<BotID, Integer> numPaths)
	{
		this.paths = new HashMap<BotID, Path>(paths);
		this.latestPaths = new HashMap<BotID, Path>(latestPaths);
		this.numPaths = new HashMap<BotID, Integer>(numPaths);
	}
	
	
	/**
	  * 
	  */
	public AresData()
	{
		paths = new HashMap<BotID, Path>();
		latestPaths = new HashMap<BotID, Path>();
		numPaths = new HashMap<BotID, Integer>();
	}
	
	
	/**
	 * @param aresData
	 */
	public AresData(AresData aresData)
	{
		paths = aresData.paths;
		latestPaths = aresData.latestPaths;
		numPaths = aresData.numPaths;
	}
	
	
	// --------------------------------------------------------------------------
	// --- methods --------------------------------------------------------------
	// --------------------------------------------------------------------------
	
	
	// --------------------------------------------------------------------------
	// --- getter/setter --------------------------------------------------------
	// --------------------------------------------------------------------------
	
	
	/**
	 * @return the paths
	 */
	public Map<BotID, Path> getPaths()
	{
		return paths;
	}
	
	
	/**
	 * @return the latestPaths
	 */
	public Map<BotID, Path> getLatestPaths()
	{
		return latestPaths;
	}
	
	
	/**
	 * Number of new paths that were used in current Pathplanning episode (Skill)
	 * 
	 * @param botId
	 * @return
	 */
	public int getNumberOfPaths(BotID botId)
	{
		Integer counter = numPaths.get(botId);
		if (counter == null)
		{
			return 0;
		}
		return counter;
	}
}
